<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Event10000" xml:space="preserve">
    <value>Failed to start service. Main registry key missing:</value>
    <comment>10000: Registry errors.</comment>
  </data>
  <data name="Event10001" xml:space="preserve">
    <value>Failed to start service. Registry value interval_minutes is missing or not a DWORD.</value>
  </data>
  <data name="Event10002" xml:space="preserve">
    <value>Failed to start service. Registry value interval_minutes_error is missing or not a DWORD.</value>
  </data>
  <data name="Event10003" xml:space="preserve">
    <value>Failed to start service. Registry value registrar is missing or not a String.</value>
  </data>
  <data name="Event10004" xml:space="preserve">
    <value>Failed to start service. Registry value username is missing or not a String.</value>
  </data>
  <data name="Event10005" xml:space="preserve">
    <value>Failed to start service. Registry value apitoken is missing or not a Binary.</value>
  </data>
  <data name="Event10006" xml:space="preserve">
    <value>Failed to start service. Registry value apitoken has invalid data.</value>
  </data>
  <data name="Event10007" xml:space="preserve">
    <value>Failed to start service. Registry value domain is missing or not a String.</value>
  </data>
  <data name="Event10100" xml:space="preserve">
    <value>Failed to start service. Registry value interval_minutes must be greater than 0.</value>
    <comment>10100: OnStart errors.</comment>
  </data>
  <data name="Event10101" xml:space="preserve">
    <value>Failed to start service. Registry value interval_minutes_error must be greater than 0.</value>
  </data>
  <data name="Event10102" xml:space="preserve">
    <value>Failed to start service. Registry value registrar must be namedotcom.</value>
  </data>
  <data name="Event10103" xml:space="preserve">
    <value>Failed to start service. Registry value username must not be empty.</value>
  </data>
  <data name="Event10104" xml:space="preserve">
    <value>Failed to start service. Registry value domain must not be empty.</value>
  </data>
  <data name="Event10300" xml:space="preserve">
    <value>RequestJSON: API responded with non-200 HTTP code.</value>
    <comment>10300: QueryAPI errors.</comment>
  </data>
  <data name="Event10301" xml:space="preserve">
    <value>RequestJSON: Got exception while querying API.</value>
  </data>
  <data name="Event10302" xml:space="preserve">
    <value>RequestJSON: Invalid JSON from API.</value>
  </data>
  <data name="Event10400" xml:space="preserve">
    <value>GetCurrentIP: Missing result code and/or message in JSON from API.</value>
    <comment>10400: Name.com QueryAPI errors.</comment>
  </data>
  <data name="Event10401" xml:space="preserve">
    <value>GetCurrentIP: API responded with non-100 API code. Message:</value>
  </data>
  <data name="Event10402" xml:space="preserve">
    <value>GetCurrentIP: Invalid JSON from API, missing client_ip.</value>
  </data>
  <data name="Event10403" xml:space="preserve">
    <value>GetCurrentIP: API did not provide a valid IP address.</value>
  </data>
  <data name="Event10410" xml:space="preserve">
    <value>Authenticate: Missing result code and/or message in JSON from API.</value>
  </data>
  <data name="Event10411" xml:space="preserve">
    <value>Authenticate: API responded with non-100 API code. Message:</value>
  </data>
  <data name="Event10412" xml:space="preserve">
    <value>Authenticate: Invalid JSON from API, missing session_token.</value>
  </data>
  <data name="Event10413" xml:space="preserve">
    <value>Authenticate: API did not provide a valid session token.</value>
  </data>
  <data name="Event10420" xml:space="preserve">
    <value>GetPriDomain: Missing result code and/or message in JSON from API.</value>
  </data>
  <data name="Event10421" xml:space="preserve">
    <value>GetPriDomain: API responded with non-100 API code. Message:</value>
  </data>
  <data name="Event10422" xml:space="preserve">
    <value>GetPriDomain: Found no domains associated with account.</value>
  </data>
  <data name="Event10423" xml:space="preserve">
    <value>GetPriDomain: No access to the domain.</value>
  </data>
  <data name="Event10430" xml:space="preserve">
    <value>GetRecords: Missing result code and/or message in JSON from API.</value>
  </data>
  <data name="Event10431" xml:space="preserve">
    <value>GetRecords: API responded with non-100 API code. Message:</value>
  </data>
  <data name="Event10440" xml:space="preserve">
    <value>UpdateDNSRecord (delete): Missing result code and/or message in JSON from API.</value>
  </data>
  <data name="Event10441" xml:space="preserve">
    <value>UpdateDNSRecord (delete): API responded with non-100 API code. Message:</value>
  </data>
  <data name="Event10442" xml:space="preserve">
    <value>UpdateDNSRecord (create): Missing result code and/or message in JSON from API.</value>
  </data>
  <data name="Event10443" xml:space="preserve">
    <value>UpdateDNSRecord (create): API responded with non-100 API code. Message:</value>
  </data>
  <data name="Event10444" xml:space="preserve">
    <value>UpdateDNSRecord: Updated domain record with the public IP address.</value>
  </data>
</root>